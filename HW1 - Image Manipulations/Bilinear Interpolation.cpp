// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size = 256;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Size = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			Size = atoi(argv[4]);		}	}		// Allocate image data array	unsigned char Imagedata[300][390][1];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), 300*390*1, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	unsigned char Imagedata1[300][390][3];	int i,j = 0;	for (i=0;i<300;i++)	{	  for (j=0;j<390;j++)	  {	  	//Green first-even positions	  	if(i%2==0 and j%2==0)	  	{	  		//Green		    Imagedata1[i][j][1] = Imagedata[i][j][0];						//Blue	  		Imagedata1[i][j][2] = (((float(Imagedata[i+1][j][0])+float(Imagedata[i-1][j][0]))/2.0)+0.5);	  			  		//Red	  		Imagedata1[i][j][0] = (((float(Imagedata[i][j+1][0])+float(Imagedata[i][j-1][0]))/2.0)+0.5);	  			  				  }		  //Green second-odd positions	  	else if(i%2!=0 and j%2!=0)	  	{----------	  		//Green	  		Imagedata1[i][j][1] = Imagedata[i][j][0];	  			  		//Blue	  		Imagedata1[i][j][2] = (((float(Imagedata[i][j+1][0])+float(Imagedata[i][j-1][0]))/2.0)+0.5);	  			  		//Red	  		Imagedata1[i][j][0] = (((float(Imagedata[i+1][j][0])+float(Imagedata[i-1][j][0]))/2.0)+0.5);	  				  }		  //Blue		else if(i%2!=0 and j%2==0)		{			//Blue			Imagedata1[i][j][2]  = Imagedata[i][j][0];						//Green			Imagedata1[i][j][1] = (((float(Imagedata[i][j+1][0])+float(Imagedata[i][j-1][0])+float(Imagedata[i+1][j][0])+float(Imagedata[i-1][j][0]))/4.0)+0.5);						//Red			Imagedata1[i][j][0] = (((float(Imagedata[i+1][j+1][0])+float(Imagedata[i+1][j-1][0])+float(Imagedata[i-1][j+1][0])+float(Imagedata[i-1][j-1][0]))/4.0)+0.5);            	    }	    //Red		else if(i%2==0 and j%2!=0)		{			//Red			Imagedata1[i][j][0] = Imagedata[i][j][0];						//Green			Imagedata1[i][j][1] = (((float(Imagedata[i][j+1][0])+float(Imagedata[i][j-1][0])+float(Imagedata[i+1][j][0])+float(Imagedata[i-1][j][0]))/4.0)+0.5);						//Blue		    Imagedata1[i][j][2] = (((float(Imagedata[i+1][j+1][0])+float(Imagedata[i+1][j-1][0])+float(Imagedata[i-1][j+1][0])+float(Imagedata[i-1][j-1][0]))/4.0)+0.5);				}			  }}int k;	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Imagedata1, sizeof(unsigned char), 300*390*3, file);	fclose(file);	return 0;}